// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  cuid             String             @id @default(cuid())
  email            String
  username         String             @unique
  name             String
  bio              String?            @db.Text
  profile          String?
  cover            String?
  reference        String             @unique
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  posts            Post[]
  PostLike         PostLike[]
  PostShare        PostShare[]
  PostComment      PostComment[]
  PostCommentReply PostCommentReply[]

  @@map("users")
}

model Post {
  cuid       String   @id @default(cuid())
  images     String[]
  location   String?
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String

  user        User          @relation(fields: [user_id], references: [cuid], onDelete: Cascade)
  PostLike    PostLike[]
  PostShare   PostShare[]
  PostComment PostComment[]

  @@map("posts")
}

model PostLike {
  cuid       String   @id @default(cuid())
  created_at DateTime @default(now())
  user_id    String
  post_id    String

  user User @relation(fields: [user_id], references: [cuid], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [cuid], onDelete: Cascade)

  @@map("post_likes")
}

model PostShare {
  cuid       String   @id @default(cuid())
  created_at DateTime @default(now())
  user_id    String
  post_id    String

  user User @relation(fields: [user_id], references: [cuid], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [cuid], onDelete: Cascade)

  @@map("post_shares")
}

model PostComment {
  cuid    String @id @default(cuid())
  content String @db.Text
  user_id String
  post_id String

  user             User               @relation(fields: [user_id], references: [cuid], onDelete: Cascade)
  post             Post               @relation(fields: [post_id], references: [cuid], onDelete: Cascade)
  PostCommentReply PostCommentReply[]

  @@map("post_comments")
}

model PostCommentReply {
  cuid       String @id @default(cuid())
  content    String @db.Text
  user_id    String
  comment_id String

  user    User        @relation(fields: [user_id], references: [cuid], onDelete: Cascade)
  comment PostComment @relation(fields: [comment_id], references: [cuid], onDelete: Cascade)

  @@map("post_comment_replies")
}
